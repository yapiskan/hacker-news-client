//
//  ListViewModel.swift
//  HackerNews
//
//  Created by Ali Ers√∂z on 3/9/24.
//

import Foundation
import Observation

@Observable
class ListViewModel {
    private let storyRepository: StoryRepositing
    private let commentRepository: CommentRepositing

    private(set) var stories: [Story] = []
    private(set) var isLoading: Bool = false
    private(set) var hasMore: Bool = true

    var selectedItem: Story? = nil
    private var offset = 0
    private let limit = 20

    init(storyRepository: StoryRepositing, commentRepository: CommentRepositing) {
        self.storyRepository = storyRepository
        self.commentRepository = commentRepository
    }

    @MainActor
    func fetchNews() async {
        guard hasMore, !isLoading else { return }

        isLoading = true
        do {
            let storyIds = try await storyRepository.fetchNewStories(refresh: false)
            let details = try await storyRepository.fetchDetails(from: offset, limit: limit)
            stories += details.map(ItemConverter.mapToStory(_:))

            offset += limit
            hasMore = offset < storyIds.count
        } catch {
            // handle error
            print("Error occurred: \(error)")
        }
        
        isLoading = false
    }

    func detail(for item: Story) -> DetailViewModel? {
        // TODO: ideally this view model is generated by a DI Container.
        guard let story = storyRepository.item(by: item.id) else { return nil }
        return .init(story: story, commentRepository: commentRepository)
    }
}
